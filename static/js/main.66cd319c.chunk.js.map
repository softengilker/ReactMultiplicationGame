{"version":3,"sources":["index.js"],"names":["MultiplicationGame","props","toggleChangeNumber","index","state","numberSelections","getSelectedNumbers","numberArray","i","length","push","createCheckBoxes","table","NumberCheckBox","number","numberSelected","toggleNumberSelected","toggleGameCompleted","stopTimer","showQuestions","questioncount","Array","fill","minute","second","showQuestionsButtonClick","bind","onQuestionCountChanged","renderRadioButton","this","myInterval","setInterval","setState","clearInterval","filter","x","alert","e","currentTarget","value","class","type","checked","onChange","className","Questions","callbackFromParent","onClick","React","Component","ticked","onChangeCheckBox","idValue","checkBoxValue","id","generateNumberValues","numbersArray","currentIndex","numberValue","Math","floor","random","secondNumberValue","a","createTable","Question","numbers","secondNumber","showanswer","showAnswers","numberindex","checkAnswersButtonClick","window","location","reload","showResult","resultText","labelClass","numberInputValue","isNaN","parseInt","evt","target","inputidval","for","updateInputValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66cd319c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from 'react-bootstrap/Button'\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass MultiplicationGame extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showQuestions : false,\n            questioncount : 5,\n            numberSelections : Array(8).fill( false ),\n            minute : 0,\n            second : 0\n        }\n        this.showQuestionsButtonClick = this.showQuestionsButtonClick.bind(this);\n        this.onQuestionCountChanged = this.onQuestionCountChanged.bind(this);\n        this.renderRadioButton = this.renderRadioButton.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n    }    \n\n    componentDidMount() {\n        this.myInterval = setInterval( () => {\n            const { second, minute } = this.state\n\n            this.setState({\n                second : second + 1\n            });\n\n            if (second === 59) {\n                this.setState({\n                    second : 0,\n                    minute : minute + 1\n                });    \n            }\n        }, 1000)\n    }\n\n    stopTimer() {\n        clearInterval(this.myInterval)\n    }\n\n    showQuestionsButtonClick() {\n\n        if ( this.state.numberSelections.filter(x => x).length === 0 ) {\n            alert('Lütfen çarpım tablosundan en az bir sayı seçiniz!');\n            return;\n        }\n        \n        this.setState({\n            showQuestions : true,\n            second : 0,\n            minute : 0\n        });\n    }\n\n    toggleChangeNumber = ( index ) => {\n        // Fix here\n        this.state.numberSelections[index] = !this.state.numberSelections[index];\n    } \n\n    getSelectedNumbers = () => {\n        let numberArray = [];\n        for ( let i = 0; i < this.state.numberSelections.length; i++ ) {\n            if ( this.state.numberSelections[i] ) {\n                numberArray.push( i + 2 );\n            }\n        }\n        return numberArray;\n    }\n\n    onQuestionCountChanged(e) {\n        this.setState({\n            questioncount : e.currentTarget.value\n        });\n    }\n\n    createCheckBoxes = () => {\n        let table = []\n    \n        for (let i = 0; i < 8; i++) {\n            table.push( <NumberCheckBox number={i + 2} numberSelected={this.state.numberSelections[i]} toggleNumberSelected={() => this.toggleChangeNumber(i)} /> )\n        }\n\n        return table;\n    }\n\n    toggleGameCompleted = () => {\n        this.stopTimer();\n    }     \n\n    renderRadioButton(number) {\n        return (\n            <label class='radio-inline giveSpace'>\n                <input  type='radio' value={number} checked={this.state.questioncount == number} onChange={this.onQuestionCountChanged} /> {number}\n            </label>\n        );\n    }\n \n    render() {\n        const { second, minute } = this.state\n\n        if (this.state.showQuestions) {\n            return (\n                <div className=\"questionspage\">\n                    <div>\n                        <label class=\"timerText\">Geçen Süre: {minute < 10 ? `0${minute}` : minute}:{second < 10 ? `0${second}` : second}</label>\n                    </div>\n                    <div class=\"col-md-7\">\n                        <label class=\"questionsTitle\">Sorular</label>\n                    </div>    \n                    <Questions numberSelections={this.getSelectedNumbers()} questioncount={this.state.questioncount} callbackFromParent={this.toggleGameCompleted}/>                                                            \n                </div>\n            );            \n        } else {        \n            return (\n                <div class=\"questionspage\">\n                    <label class=\"title\">Çarpım Tablosu Sayıları:</label>\n                    <br/>\n                    {this.createCheckBoxes()}\n                    <br/>\n                    <label class=\"title\">Soru Sayısı:</label>\n                    <br/>\n                    {this.renderRadioButton(3)}\n                    {this.renderRadioButton(5)}\n                    {this.renderRadioButton(10)}\n                    <br/><br/>\n                    <Button type=\"submit\" class=\"btn btn-primary\" onClick={this.showQuestionsButtonClick}>Soruları Hazırla</Button>\n                </div>\n            );\n        }\n    }\n}\n\nclass NumberCheckBox extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ticked : false\n        };\n        this.onChangeCheckBox = this.onChangeCheckBox.bind(this);\n    } \n\n    onChangeCheckBox() {\n        this.setState({ \n            ticked : !this.state.ticked\n        });\n        this.props.toggleNumberSelected();\n    }\n\n    render() {\n        const idValue = 'inlineCheckbox' + this.props.number;\n        const checkBoxValue = 'option' + this.props.number;\n\n        return (\n            <label class=\"checkbox-inline giveSpace\">\n                <input type=\"checkbox\" id={idValue} value={checkBoxValue} checked={this.state.ticked} onChange={this.onChangeCheckBox} /> {this.props.number}\n            </label> \n        );\n    }    \n}\n\nclass Questions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showAnswers : 0,\n            numbers : this.generateNumberValues()\n        }\n        this.checkAnswersButtonClick = this.checkAnswersButtonClick.bind(this);\n    }       \n\n    generateNumberValues = () => {\n        \n        let numbersArray = [];\n\n        for (let i = 0; i < this.props.questioncount; i++) {\n            numbersArray.push( [] );\n        }\n\n        let currentIndex = 0\n\n        while ( currentIndex < this.props.questioncount ) {\n\n            let numberValue = this.props.numberSelections[Math.floor(Math.random() * this.props.numberSelections.length)];\n            let secondNumberValue = Math.floor(Math.random() * 10) + 1\n\n            // Avoid duplication\n            if ( !numbersArray.filter( a => ( a[0] === numberValue && a[1] === secondNumberValue ) || \n                                            ( a[1] === numberValue && a[0] === secondNumberValue ) ).length ) {\n                numbersArray[currentIndex].push( numberValue );\n                numbersArray[currentIndex++].push( secondNumberValue );                                                     \n            }\n        }     \n\n        return numbersArray;\n    }    \n\n    createTable = () => {\n        let table = []\n    \n        // Outer loop to create parent\n        for (let i = 0; i < this.props.questioncount; i++) {\n          table.push( <Question number={this.state.numbers[i][0]} secondNumber={this.state.numbers[i][1]} showanswer={this.state.showAnswers} numberindex={i+1} /> )\n          table.push( <br/> )\n        }\n        return table\n    }\n\n    checkAnswersButtonClick() {\n        this.setState({\n            showAnswers : 1\n        });\n        this.props.callbackFromParent();\n    }\n\n    render() {\n        return (\n            <div className=\"game\">\n                {this.createTable()}\n                <div class=\"row\">\n                    <div class=\"col-md-4\">\n                        <Button type=\"submit\" onClick={this.checkAnswersButtonClick}>Yanıtları Kontrol</Button>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <Button onClick={() => window.location.reload(false)}>Tekrar Oyna</Button>\n                    </div>\n                </div>                \n            </div>\n        );\n    }    \n}\n\nclass Question extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberInputValue : ''                       \n        }\n    }       \n\n    showResult = () => {\n        if ( this.props.showanswer === 1 ) {\n            let resultText = '';\n            let labelClass = 'answerWarning';\n           \n            if (this.state.numberInputValue === '') {\n                resultText = 'Lütfen bir değer giriniz'\n            } else if ( isNaN(this.state.numberInputValue) ) {\n                resultText = 'Lütfen bir numarasal bir değer giriniz'\n            } else if ( parseInt(this.props.number) * parseInt(this.props.secondNumber) === parseInt(this.state.numberInputValue) ) {\n                resultText = 'Doğru'\n                labelClass = 'answerTrue';\n            } else {\n                resultText = 'Yanlış'\n                labelClass = 'answerFalse';\n            }\n\n            return ( <label class={labelClass}>{resultText}</label>);\n        }\n    }\n\n    updateInputValue(evt) {\n        this.setState({\n            numberInputValue: evt.target.value\n        });\n    }    \n\n    render() {\n        const inputidval = 'inputtext' + this.props.numberindex;\n\n        return (\n            <div class=\"row\">\n                <div class=\"col-md-3 centered\">\n                    <label class=\"questiontitle\">{this.props.numberindex})</label>\n                    <label class=\"control-label\" for={inputidval}>{this.props.number} X {this.props.secondNumber} sorusunun yanıtı nedir?</label>\n                </div>\n                <div class=\"col-md-1\">\n                    <input type=\"text\" class=\"form-control\" value={this.state.numberInputValue} onChange={evt => this.updateInputValue(evt)} id={inputidval}/>\n                </div>\n                <div class=\"col-md-4\">\n                    {this.showResult()}\n                </div>                                    \n            </div>\n        );\n    }    \n}\n\n  // ========================================\n  \n  ReactDOM.render(\n    <MultiplicationGame />,\n    document.getElementById('root')\n  );\n"],"sourceRoot":""}